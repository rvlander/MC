import static org.mc.mcjavacore.MCJOperators.*;
import static org.mc.mcfunctions.MCJFunctions.*;
import org.mc.mcfunctions.MCJOutputArg;
import static org.mc.mcjavautils.MCJUtils.*;
import static org.mc.mcjavacore.MCJBaseFunctions.*;
public class MatCode{
public static double[][] extrema2(MCJOutputArg[] oargs,double[][] xy,double[][] varargin){
double[][] xymax= new double[0][0];
double[][] smax= new double[0][0];
double[][] xymin= new double[0][0];
double[][] smin= new double[0][0];
double[][] M=subsref(size,new double[][][]{xy});
if(any(ne(subsref(length,new double[][][]{M}),matrixFromDouble(2)))){subsref(error,new double[][][]{'Entry must be a matrix.'});
};
double[][] N=subsref(M,new double[][][]{matrixFromDouble(2)});
M=subsref(M,new double[][][]{matrixFromDouble(1)});
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
double[][] smaxcol;
oa[1]= new MCJOutputArg();
double[][] smincol;
extremos(oa,new double[][][]{xy});
smaxcol=oa[0].val;
smincol=oa[1].val;
double[][] im=subsref(unique,new double[][][]{vertcat(subsref(smaxcol,new double[][][]{null,matrixFromDouble(1)}),subsref(smincol,new double[][][]{null,matrixFromDouble(1)}))});
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
double[][] smaxfil;
oa[1]= new MCJOutputArg();
double[][] sminfil;
extremos(oa,new double[][][]{transpose(subsref(xy,new double[][][]{im,null}))});
smaxfil=oa[0].val;
sminfil=oa[1].val;
smaxcol=subsref(sub2ind,new double[][][]{horzcat(M,N),subsref(smaxcol,new double[][][]{null,matrixFromDouble(1)}),subsref(smaxcol,new double[][][]{null,matrixFromDouble(2)})});
smincol=subsref(sub2ind,new double[][][]{horzcat(M,N),subsref(smincol,new double[][][]{null,matrixFromDouble(1)}),subsref(smincol,new double[][][]{null,matrixFromDouble(2)})});
smaxfil=subsref(sub2ind,new double[][][]{horzcat(M,N),subsref(im,new double[][][]{subsref(smaxfil,new double[][][]{null,matrixFromDouble(2)})}),subsref(smaxfil,new double[][][]{null,matrixFromDouble(1)})});
sminfil=subsref(sub2ind,new double[][][]{horzcat(M,N),subsref(im,new double[][][]{subsref(sminfil,new double[][][]{null,matrixFromDouble(2)})}),subsref(sminfil,new double[][][]{null,matrixFromDouble(1)})});
smax=subsref(intersect,new double[][][]{smaxcol,smaxfil});
smin=subsref(intersect,new double[][][]{smincol,sminfil});
if(any(eq(nargin,matrixFromDouble(1)))){MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
double[][] iext;
oa[1]= new MCJOutputArg();
double[][] jext;
ind2sub(oa,new double[][][]{horzcat(M,N),subsref(unique,new double[][][]{vertcat(smax,smin)})});
iext=oa[0].val;
jext=oa[1].val;
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
double[][] sextmax;
oa[1]= new MCJOutputArg();
double[][] sextmin;
extremos_diag(oa,new double[][][]{iext,jext,xy,matrixFromDouble(1)});
sextmax=oa[0].val;
sextmin=oa[1].val;
smax=subsref(intersect,new double[][][]{smax,vertcat(vertcat(M,(minus(mtimes(N,M),M))),sextmax)});
smin=subsref(intersect,new double[][][]{smin,vertcat(vertcat(M,(minus(mtimes(N,M),M))),sextmin)});
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
oa[1]= new MCJOutputArg();
ind2sub(oa,new double[][][]{horzcat(M,N),subsref(unique,new double[][][]{vertcat(smax,smin)})});
iext=oa[0].val;
jext=oa[1].val;
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
oa[1]= new MCJOutputArg();
extremos_diag(oa,new double[][][]{iext,jext,xy,uminus(matrixFromDouble(1))});
sextmax=oa[0].val;
sextmin=oa[1].val;
smax=subsref(intersect,new double[][][]{smax,vertcat(vertcat(matrixFromDouble(1),mtimes(N,M)),sextmax)});
smin=subsref(intersect,new double[][][]{smin,vertcat(vertcat(matrixFromDouble(1),mtimes(N,M)),sextmin)});
};
xymax=subsref(xy,new double[][][]{smax});
xymin=subsref(xy,new double[][][]{smin});
MCJOutputArg[] oa = new MCJOutputArg[2];
oa[0]= new MCJOutputArg();
double[][] temp;
oa[1]= new MCJOutputArg();
double[][] inmax;
sort(oa,new double[][][]{uminus(xymax)});
temp=oa[0].val;
inmax=oa[1].val;
clear;

if(oargs !=null){
if(oargs.length>0)oargs[0].val=xymax;
if(oargs.length>1)oargs[1].val=smax;
if(oargs.length>2)oargs[2].val=xymin;
if(oargs.length>3)oargs[3].val=smin;
}
return xymax;
}

}
